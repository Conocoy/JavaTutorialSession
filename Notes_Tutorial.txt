Class names should start with an upper case, method names with a lower case, program file name should match the class name (is this true? maybe a convention)

Singleton example is good to see how singleton classes work, can be a powerful technique!

Inheritance acces control:
1) Methods declared pulic in a superclass must be public in subclasses
2) Methods declared protected must be declared protected or public
3) Methods declared without acces control can be more private
4) Methods declared private do not inherit

Enhanced for loops in java, same idea as the Python for x in l where l is a list. Example:

int[] numbers = [1,2,3]
for( int x : numbers){ System.out.println(x); }
results in

1
2
3

Floats in string:
example: System.out.println("pow(%.3f, %.3f) is %.3f%n),11.635,2.760, 874.008)
The %n is a platform independent newline character which corresponds to
System.getProperty("line.separator")


Polymorphism etc:
You can give a Parent class reference a child object. for example:

public class Animal {
	void talk(){
		println("Animals don't talk!");
	}
}

public class Dog extends Animal {
	void talk(){
		println("Wan Wan");
	}
}

Now consider the following demo code:

public class AnimalsAndDogs {
	public static void main(String[] args){
		Animal a = new Animal();
		Animal b = new Dog();	
		Dog c = new Dog();
		
		a.talk();
		b.talk();
		c.talk();
	}
}

Now, when compiling (javac AnimalsAndDogs.java), the compiler looks at the animal talk method for a (reference animal and an object animal). For c the compiler looks at the Dogs talk method (ref dog and object dog). However, for b the compiler looks at the Animal talk method, as the reference is an Animal. When running the JVM (Java Virtual Machine, the platform independent running environment of java) a.talk() runs Animal.talk, c.talk() runs Dog.talk, but now b.talk() runs Dog.talk() as the object is a dog, even though the reference is an animal.